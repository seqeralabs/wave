/*
 * Wave API
 * Wave Containers Provisioning Service API A comprehensive container orchestration and build service
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.seqera.wave.api.schema.v1;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import io.seqera.wave.api.schema.v1.ContainerLayer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.*;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;
import jakarta.annotation.Generated;

/**
 * Container configuration
 */
@JsonPropertyOrder({
    ContainerConfig.JSON_PROPERTY_ENTRYPOINT,
    ContainerConfig.JSON_PROPERTY_CMD,
    ContainerConfig.JSON_PROPERTY_ENV,
    ContainerConfig.JSON_PROPERTY_WORKING_DIR,
    ContainerConfig.JSON_PROPERTY_LAYERS,
})
@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
@Introspected
public class ContainerConfig {

    public static final String JSON_PROPERTY_ENTRYPOINT = "entrypoint";
    public static final String JSON_PROPERTY_CMD = "cmd";
    public static final String JSON_PROPERTY_ENV = "env";
    public static final String JSON_PROPERTY_WORKING_DIR = "workingDir";
    public static final String JSON_PROPERTY_LAYERS = "layers";

    /**
     * Container entrypoint
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private List<@NotNull String> entrypoint;

    /**
     * Container command
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_CMD)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private List<@NotNull String> cmd;

    /**
     * Environment variables
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_ENV)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private List<@NotNull String> env;

    /**
     * Working directory
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_WORKING_DIR)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String workingDir;

    /**
     * Container layers
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_LAYERS)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private List<@Valid ContainerLayer> layers;

    /**
     * Container entrypoint
     *
     * @return the entrypoint property value
     */
    public List<@NotNull String> getEntrypoint() {
        return entrypoint;
    }

    /**
     * Set the entrypoint property value
     *
     * @param entrypoint property value to set
     */
    public void setEntrypoint(List<@NotNull String> entrypoint) {
        this.entrypoint = entrypoint;
    }

    /**
     * Set entrypoint in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig entrypoint(List<@NotNull String> entrypoint) {
        this.entrypoint = entrypoint;
        return this;
    }
    /**
     * Add an item to the entrypoint property in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig addEntrypointItem(String entrypointItem) {
        if (entrypoint == null) {
            entrypoint = new ArrayList<>();
        }
        entrypoint.add(entrypointItem);
        return this;
    }

    /**
     * Container command
     *
     * @return the cmd property value
     */
    public List<@NotNull String> getCmd() {
        return cmd;
    }

    /**
     * Set the cmd property value
     *
     * @param cmd property value to set
     */
    public void setCmd(List<@NotNull String> cmd) {
        this.cmd = cmd;
    }

    /**
     * Set cmd in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig cmd(List<@NotNull String> cmd) {
        this.cmd = cmd;
        return this;
    }
    /**
     * Add an item to the cmd property in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig addCmdItem(String cmdItem) {
        if (cmd == null) {
            cmd = new ArrayList<>();
        }
        cmd.add(cmdItem);
        return this;
    }

    /**
     * Environment variables
     *
     * @return the env property value
     */
    public List<@NotNull String> getEnv() {
        return env;
    }

    /**
     * Set the env property value
     *
     * @param env property value to set
     */
    public void setEnv(List<@NotNull String> env) {
        this.env = env;
    }

    /**
     * Set env in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig env(List<@NotNull String> env) {
        this.env = env;
        return this;
    }
    /**
     * Add an item to the env property in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig addEnvItem(String envItem) {
        if (env == null) {
            env = new ArrayList<>();
        }
        env.add(envItem);
        return this;
    }

    /**
     * Working directory
     *
     * @return the workingDir property value
     */
    public String getWorkingDir() {
        return workingDir;
    }

    /**
     * Set the workingDir property value
     *
     * @param workingDir property value to set
     */
    public void setWorkingDir(String workingDir) {
        this.workingDir = workingDir;
    }

    /**
     * Set workingDir in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig workingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }

    /**
     * Container layers
     *
     * @return the layers property value
     */
    public List<@Valid ContainerLayer> getLayers() {
        return layers;
    }

    /**
     * Set the layers property value
     *
     * @param layers property value to set
     */
    public void setLayers(List<@Valid ContainerLayer> layers) {
        this.layers = layers;
    }

    /**
     * Set layers in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig layers(List<@Valid ContainerLayer> layers) {
        this.layers = layers;
        return this;
    }
    /**
     * Add an item to the layers property in a chainable fashion.
     *
     * @return The same instance of ContainerConfig for chaining.
     */
    public ContainerConfig addLayersItem(ContainerLayer layersItem) {
        if (layers == null) {
            layers = new ArrayList<>();
        }
        layers.add(layersItem);
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        var containerConfig = (ContainerConfig) o;
        return Objects.equals(entrypoint, containerConfig.entrypoint)
            && Objects.equals(cmd, containerConfig.cmd)
            && Objects.equals(env, containerConfig.env)
            && Objects.equals(workingDir, containerConfig.workingDir)
            && Objects.equals(layers, containerConfig.layers);
    }

    @Override
    public int hashCode() {
        return Objects.hash(entrypoint, cmd, env, workingDir, layers);
    }

    @Override
    public String toString() {
        return "ContainerConfig("
            + "entrypoint: " + getEntrypoint() + ", "
            + "cmd: " + getCmd() + ", "
            + "env: " + getEnv() + ", "
            + "workingDir: " + getWorkingDir() + ", "
            + "layers: " + getLayers()
            + ")";
    }

}