/*
 * Wave API
 * Wave Containers Provisioning Service API A comprehensive container orchestration and build service
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.seqera.wave.api.schema.v1;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.*;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import io.micronaut.core.annotation.Introspected;
import io.micronaut.core.annotation.Nullable;
import jakarta.annotation.Generated;

/**
 * Package specifications
 */
@JsonPropertyOrder({
    PackagesSpec.JSON_PROPERTY_TYPE,
    PackagesSpec.JSON_PROPERTY_ENTRIES,
    PackagesSpec.JSON_PROPERTY_CHANNELS,
    PackagesSpec.JSON_PROPERTY_CONDA_OPTS,
})
@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
@Introspected
public class PackagesSpec {

    public static final String JSON_PROPERTY_TYPE = "type";
    public static final String JSON_PROPERTY_ENTRIES = "entries";
    public static final String JSON_PROPERTY_CHANNELS = "channels";
    public static final String JSON_PROPERTY_CONDA_OPTS = "condaOpts";

    /**
     * Package specifications type
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String type;

    /**
     * Package entries
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_ENTRIES)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private List<@NotNull String> entries;

    /**
     * Channels for conda packages
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_CHANNELS)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private List<@NotNull String> channels;

    /**
     * Conda options
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_CONDA_OPTS)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private Map<String, @NotNull String> condaOpts;

    /**
     * Package specifications type
     *
     * @return the type property value
     */
    public String getType() {
        return type;
    }

    /**
     * Set the type property value
     *
     * @param type property value to set
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Set type in a chainable fashion.
     *
     * @return The same instance of PackagesSpec for chaining.
     */
    public PackagesSpec type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Package entries
     *
     * @return the entries property value
     */
    public List<@NotNull String> getEntries() {
        return entries;
    }

    /**
     * Set the entries property value
     *
     * @param entries property value to set
     */
    public void setEntries(List<@NotNull String> entries) {
        this.entries = entries;
    }

    /**
     * Set entries in a chainable fashion.
     *
     * @return The same instance of PackagesSpec for chaining.
     */
    public PackagesSpec entries(List<@NotNull String> entries) {
        this.entries = entries;
        return this;
    }
    /**
     * Add an item to the entries property in a chainable fashion.
     *
     * @return The same instance of PackagesSpec for chaining.
     */
    public PackagesSpec addEntriesItem(String entriesItem) {
        if (entries == null) {
            entries = new ArrayList<>();
        }
        entries.add(entriesItem);
        return this;
    }

    /**
     * Channels for conda packages
     *
     * @return the channels property value
     */
    public List<@NotNull String> getChannels() {
        return channels;
    }

    /**
     * Set the channels property value
     *
     * @param channels property value to set
     */
    public void setChannels(List<@NotNull String> channels) {
        this.channels = channels;
    }

    /**
     * Set channels in a chainable fashion.
     *
     * @return The same instance of PackagesSpec for chaining.
     */
    public PackagesSpec channels(List<@NotNull String> channels) {
        this.channels = channels;
        return this;
    }
    /**
     * Add an item to the channels property in a chainable fashion.
     *
     * @return The same instance of PackagesSpec for chaining.
     */
    public PackagesSpec addChannelsItem(String channelsItem) {
        if (channels == null) {
            channels = new ArrayList<>();
        }
        channels.add(channelsItem);
        return this;
    }

    /**
     * Conda options
     *
     * @return the condaOpts property value
     */
    public Map<String, @NotNull String> getCondaOpts() {
        return condaOpts;
    }

    /**
     * Set the condaOpts property value
     *
     * @param condaOpts property value to set
     */
    public void setCondaOpts(Map<String, @NotNull String> condaOpts) {
        this.condaOpts = condaOpts;
    }

    /**
     * Set condaOpts in a chainable fashion.
     *
     * @return The same instance of PackagesSpec for chaining.
     */
    public PackagesSpec condaOpts(Map<String, @NotNull String> condaOpts) {
        this.condaOpts = condaOpts;
        return this;
    }

    /**
     * Set the value for the key for the condaOpts map property in a chainable fashion.
     *
     * @return The same instance of PackagesSpec for chaining.
     */
    public PackagesSpec putCondaOptsItem(String key, String condaOptsItem) {
        if (condaOpts == null) {
            condaOpts = new HashMap<>();
        }
        condaOpts.put(key, condaOptsItem);
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        var packagesSpec = (PackagesSpec) o;
        return Objects.equals(type, packagesSpec.type)
            && Objects.equals(entries, packagesSpec.entries)
            && Objects.equals(channels, packagesSpec.channels)
            && Objects.equals(condaOpts, packagesSpec.condaOpts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, entries, channels, condaOpts);
    }

    @Override
    public String toString() {
        return "PackagesSpec("
            + "type: " + getType() + ", "
            + "entries: " + getEntries() + ", "
            + "channels: " + getChannels() + ", "
            + "condaOpts: " + getCondaOpts()
            + ")";
    }

}