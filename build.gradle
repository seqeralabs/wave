import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'io.seqera.wave.groovy-library-conventions'
    id 'io.seqera.wave.groovy-application-conventions'
    id("com.github.johnrengelman.shadow") version "7.1.1"
    id("io.micronaut.application") version "3.4.1"
    id "com.google.cloud.tools.jib" version "3.2.1"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

String gitVersion() {
    def p = new ProcessBuilder() .command('sh','-c','git rev-parse --short HEAD') .start()
    def r = p.waitFor()
    return r==0 ? p.text.trim() : '(unknown)'
}

group "io.seqera"
version "${rootProject.file('VERSION').text.trim()}"
ext.commitId = gitVersion()

repositories {
    mavenCentral()
    mavenCentral()
    maven { url = 'https://s3-eu-west-1.amazonaws.com/maven.seqera.io/releases' }
    maven { url = 'https://s3-eu-west-1.amazonaws.com/maven.seqera.io/snapshots' }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    compileOnly("io.micronaut.data:micronaut-data-processor")
    compileOnly("io.micronaut:micronaut-http-validation")
    implementation("jakarta.persistence:jakarta.persistence-api:3.0.0")
    api project(':wave-api')
    api project(':wave-utils')
    api project(':wave-mail')
    
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.aws:micronaut-aws-parameter-store")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    implementation "org.codehaus.groovy:groovy-json"
    implementation "org.codehaus.groovy:groovy-nio"
    implementation 'com.google.guava:guava:24.1.1-jre'
    implementation 'dev.failsafe:failsafe:3.1.0'
    implementation('io.projectreactor:reactor-core')
    implementation("io.seqera:tower-crypto:22.1.1") { transitive = false }
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'com.amazonaws:aws-java-sdk-ecr:1.12.253'

    runtimeOnly 'com.amazonaws:aws-java-sdk-sts:1.12.253'
    runtimeOnly("com.h2database:h2")
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")

    implementation("ch.qos.logback:logback-classic")
    runtimeOnly("io.netty:netty-tcnative-boringssl-static:2.0.0.Final")
    testImplementation "org.apache.commons:commons-compress:1.21"
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:mariadb:1.17.3")

    // --
    runtimeOnly("ch.qos.logback:logback-classic")
}


application {
    mainClass.set("io.seqera.wave.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}


//
// Build container image with JIB
// https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin
//
jib {
    from {
        image = '195996028523.dkr.ecr.eu-west-1.amazonaws.com/wave/kaniko:0.1.1'
        platforms {
            platform { architecture = 'amd64'; os = 'linux' }
        }
    }
    to {
        image = "195996028523.dkr.ecr.eu-west-1.amazonaws.com/wave/app:$version"
    }
    container {
        creationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        filesModificationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        ports = ['9090']
        entrypoint = '/bin/sh'
        args = ['/launch.sh']  // copied from `src/main/jib` directory
        environment = [
                'MICRONAUT_ENVIRONMENTS': 'prod'
        ]
    }
    extraDirectories {
        paths {
            path { from = file('pack/layers'); into = '/pack/layers' }
            path { from = file('src/main/jib'); }
            path { from = file('.'); includes = ['config.yml'] }
        }
        permissions = ['/launch.sh': '755']
    }
}

run{
    def args = ['-Dmicronaut.environments=dev,h2,mail']
    if( environment['JVM_OPTS'] ) args.add(environment['JVM_OPTS'])
    jvmArgs args
    systemProperties 'DOCKER_USER': project.findProperty('DOCKER_USER') ?: environment['DOCKER_USER'],
            'DOCKER_PAT': project.findProperty('DOCKER_PAT') ?: environment['DOCKER_PAT'],
            'QUAY_USER': project.findProperty('QUAY_USER') ?: environment['QUAY_USER'],
            'QUAY_PAT': project.findProperty('QUAY_PAT') ?: environment['QUAY_PAT']
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

/** Update version number for backend app and modules */
task buildInfo { doLast {
    def info = """\
                name=${project.name}
                group=${project.group}
                version=${version}
                commitId=${project.property('commitId')}
            """.stripIndent().toString()
    def f = file("${buildDir}/resources/main/META-INF/build-info.properties")
    f.parentFile.mkdirs()
    f.text = info
} }
compileGroovy.dependsOn buildInfo

asciidoctorj {
    modules {
        diagram.use()
    }
}
