/*
 *  Copyright (c) 2023, Seqera Labs.
 *
 *  This Source Code Form is subject to the terms of the Mozilla Public
 *  License, v. 2.0. If a copy of the MPL was not distributed with this
 *  file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *  This Source Code Form is "Incompatible With Secondary Licenses", as
 *  defined by the Mozilla Public License, v. 2.0.
 */

package io.seqera.wave.service.scan

import groovy.transform.Canonical
import groovy.transform.CompileStatic
import groovy.transform.ToString
import groovy.util.logging.Slf4j
import io.seqera.wave.util.StringUtils
import org.jetbrains.annotations.NotNull

/**
 * Model for Scan Vulnerability
 *
 * @author Munish Chouhan <munish.chouhan@seqera.io>
 */
@Slf4j
@ToString(includeNames = true, includePackage = false)
@Canonical
@CompileStatic
class ScanVulnerability implements Comparable<ScanVulnerability> {

    static final Map<String,Integer> ORDER = Map.of(
            'LOW', 0,
            'MEDIUM', 1,
            'HIGH', 2,
            'CRITICAL', 3 )

    String id
    String severity
    String title
    String pkgName
    String installedVersion
    String fixedVersion
    String primaryUrl

    ScanVulnerability(){}

    ScanVulnerability(String id, String severity, String title, String pkgName, String installedVersion, String fixedVersion, String primaryUrl) {
        this.id = StringUtils.surrealId(id)
        this.severity = severity
        this.title = title
        this.pkgName = pkgName
        this.installedVersion = installedVersion
        this.fixedVersion = fixedVersion
        this.primaryUrl = primaryUrl
    }

    void setId(String id) {
        this.id = StringUtils.surrealId(id)
    }

    @Override
    int compareTo(@NotNull ScanVulnerability that) {
        if( that.severity==null ) return 1
        return ORDER[this.severity] <=> ORDER[that.severity]
    }
}
