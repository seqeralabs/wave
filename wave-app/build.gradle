/*
 *  Wave, containers provisioning service
 *  Copyright (c) 2023-2025, Seqera Labs
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'io.seqera.wave.java-library-conventions'
    id 'io.seqera.wave.groovy-application-conventions'
    id "io.micronaut.minimal.application" version "4.1.1"
    id "io.micronaut.openapi" version "4.5.4"
    id "com.google.cloud.tools.jib" version "3.4.5"
    id 'jacoco'
}

String gitVersion() {
    def p = new ProcessBuilder() .command('sh','-c','git rev-parse --short HEAD') .start()
    def r = p.waitFor()
    return r==0 ? p.text.trim() : '(unknown)'
}

group "io.seqera"
version "${rootProject.file('VERSION').text.trim()}"
ext.commitId = gitVersion()

repositories {
    mavenCentral()
    maven { url = 'https://s3-eu-west-1.amazonaws.com/maven.seqera.io/releases' }
    maven { url = 'https://s3-eu-west-1.amazonaws.com/maven.seqera.io/snapshots' }
}

dependencies {
    implementation project(':wave-api')

    annotationProcessor 'io.micronaut.validation:micronaut-validation-processor'
    annotationProcessor 'io.micronaut:micronaut-http-validation'
    compileOnly 'io.micronaut.data:micronaut-data-processor'
    compileOnly 'io.micronaut:micronaut-inject-groovy'
    compileOnly 'io.micronaut:micronaut-http-validation'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    implementation 'io.seqera:lib-lang:1.0.0'
    implementation 'io.seqera:lib-serde:1.0.0'
    implementation 'io.seqera:lib-mail:1.3.0'
    implementation 'io.seqera:lib-pool:1.0.0'
    implementation 'io.seqera:lib-retry:1.1.0'
    implementation 'io.seqera:lib-random:1.0.0'
    implementation 'io.seqera:lib-activator:1.0.0'
    implementation 'io.seqera:wave-utils:1.0.0'
    implementation 'io.seqera:lib-crypto:1.0.0'
    implementation 'io.seqera:jedis-lock:1.0.0'
    implementation 'io.seqera:lib-data-queue-redis:1.1.0'
    implementation 'io.seqera:lib-data-stream-redis:1.1.0'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-jackson-databind'
    implementation 'io.micronaut.groovy:micronaut-runtime-groovy'
    implementation 'io.micronaut.reactor:micronaut-reactor'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client'
    implementation 'jakarta.annotation:jakarta.annotation-api'
    implementation 'io.micronaut.validation:micronaut-validation'
    implementation 'io.micronaut.security:micronaut-security'
    implementation 'io.micronaut:micronaut-websocket'
    implementation 'org.apache.groovy:groovy-json'
    implementation 'org.apache.groovy:groovy-nio'
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'dev.failsafe:failsafe:3.1.0'
    implementation 'io.micronaut.reactor:micronaut-reactor'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'io.kubernetes:client-java:24.0.0'
    implementation 'io.kubernetes:client-java-api-fluent:24.0.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.squareup.moshi:moshi:1.15.1'
    implementation 'com.squareup.moshi:moshi-adapters:1.15.1'
    implementation 'redis.clients:jedis:5.1.3'
    implementation 'io.github.resilience4j:resilience4j-ratelimiter:0.17.0'
    implementation 'io.micronaut:micronaut-retry'
    // caching deps
    implementation 'io.micronaut.cache:micronaut-cache-core'
    implementation 'io.micronaut.cache:micronaut-cache-caffeine'
    implementation 'io.micronaut.aws:micronaut-aws-parameter-store'
    implementation 'software.amazon.awssdk:ecr'
    implementation 'software.amazon.awssdk:ecrpublic'
    implementation 'software.amazon.awssdk:ses'
    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.luaj:luaj-jse:3.0.1'
    // add postgresql dependencies
    implementation 'io.micronaut.data:micronaut-data-jdbc'
    implementation 'io.micronaut.sql:micronaut-jdbc-hikari'  // HikariCP for connection pooling
    implementation 'org.postgresql:postgresql:42.7.7'        // PostgreSQL Driver
    //object storage dependency
    implementation 'io.micronaut.objectstorage:micronaut-object-storage-aws'
    implementation 'io.micronaut.objectstorage:micronaut-object-storage-local'
    // include sts to allow the use of service account role - https://stackoverflow.com/a/73306570
    // this sts dependency is require by micronaut-aws-parameter-store,
    // not directly used by the app, for this reason keeping `runtimeOnly`
    runtimeOnly 'software.amazon.awssdk:sts'
    runtimeOnly 'io.netty:netty-tcnative-boringssl-static:2.0.0.Final'
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'com.h2database:h2'
    testImplementation testFixtures('io.seqera:lib-fixtures-redis:1.0.0')
    
    // --
    implementation 'ch.qos.logback:logback-classic:1.5.16'

    // rate limit
    implementation 'com.coveo:spillway:3.0.0'

    // monitoring
    implementation 'io.micronaut.micrometer:micronaut-micrometer-core'
    implementation 'io.micronaut.micrometer:micronaut-micrometer-registry-prometheus'
    // Also required to enable endpoint
    implementation 'io.micronaut:micronaut-management'
    //views
    implementation 'io.micronaut.views:micronaut-views-handlebars'
    // bump version to prevent security issue
    runtimeOnly 'org.apache.commons:commons-lang3:3.18.0'
    runtimeOnly "io.netty:netty-bom:4.2.4.Final"
    
    // swagger ui via webjars
    implementation 'org.webjars:swagger-ui:5.17.14'
}

application {
    mainClass.set("io.seqera.wave.Application")
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("io.seqera.*")
    }
    openapi {
        server(project(':wave-api').file("build/openapi/openapi.yaml")) {
            apiPackageName = "io.seqera.wave.api.spec"
            modelPackageName = "io.seqera.wave.api.schema.v0"
            useReactive = false
            useAuth = false
            apiNameSuffix = "ApiSpec"
            additionalProperties = [
                "removeOperationIdPrefix": "true",
                "operationIdCaseFormat": "camelCase",
                "interfaceOnly": "true",
                "dateLibrary": "java8",
                "openApiNullable": "false"
            ]
        }
    }
}


//
// Build container image with JIB
// https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin
//
jib {
    from {
        image = 'cr.seqera.io/public/nf-jdk:corretto-24-al2023-jemalloc'
        platforms {
            platform { architecture = 'amd64'; os = 'linux' }
        }
    }
    to {
        image = findProperty("jibRepo") ?: "195996028523.dkr.ecr.eu-west-1.amazonaws.com/wave/app:$version"
    }
    container {
        creationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        filesModificationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        ports = ['9090']
        entrypoint = '/bin/sh'
        args = ['/launch.sh']  // copied from `src/main/jib` directory
        environment = [
                'MICRONAUT_ENVIRONMENTS': 'prod'
        ]
    }
    extraDirectories {
        paths {
            path { from = file('src/main/jib'); }
            path { from = file('.'); includes = ['config.yml'] }
        }
        permissions = ['/launch.sh': '755']
    }
    allowInsecureRegistries= findProperty("jibRepo")?.toString()?.indexOf('localhost') != -1
}

run{
    def envs = findProperty('micronautEnvs')
    def args = ["-Dmicronaut.environments=$envs","-Djdk.tracePinnedThreads=short", "--add-opens","java.base/java.lang=ALL-UNNAMED"]
    if( environment['JVM_OPTS'] ) args.add(environment['JVM_OPTS'])
    jvmArgs args
    systemProperties 'DOCKER_USER': project.findProperty('DOCKER_USER') ?: environment['DOCKER_USER'],
            'DOCKER_PAT': project.findProperty('DOCKER_PAT') ?: environment['DOCKER_PAT'],
            'QUAY_USER': project.findProperty('QUAY_USER') ?: environment['QUAY_USER'],
            'QUAY_PAT': project.findProperty('QUAY_PAT') ?: environment['QUAY_PAT']
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
    environment 'DOCKER_USER', project.findProperty('DOCKER_USER') ?: environment['DOCKER_USER']
    environment 'DOCKER_PAT', project.findProperty('DOCKER_PAT') ?: environment['DOCKER_PAT']
    environment 'QUAY_USER', project.findProperty('QUAY_USER') ?: environment['QUAY_USER']
    environment 'QUAY_PAT', project.findProperty('QUAY_PAT') ?: environment['QUAY_PAT']

    systemProperty 'logback.configurationFile', 'src/test/resources/logback-test.xml'

}

/** Update version number for backend app and modules */
task buildInfo { doLast {
    def info = """\
                name=${project.name}
                group=${project.group}
                version=${version}
                commitId=${project.property('commitId')}
            """.stripIndent().toString()
    def f = file("${buildDir}/resources/main/META-INF/build-info.properties")
    f.parentFile.mkdirs()
    f.text = info
} }
buildInfo.dependsOn processResources
compileGroovy.dependsOn buildInfo

// Swagger UI Generation
tasks.register('generateSwaggerUI') {
    group = 'documentation'
    description = 'Generate Swagger UI using WebJars'
    dependsOn project(':wave-api').tasks.named('generateOpenApi')
    
    doLast {
        def resourcesDir = file('src/main/resources/public/openapi')
        def version = file('../VERSION').text.trim()
        
        // Create directory if it doesn't exist (preserve existing versioned files)
        resourcesDir.mkdirs()
        
        // Remove only the latest version file to avoid conflicts
        new File(resourcesDir, 'openapi-latest.yaml').delete()
        new File(resourcesDir, 'index.html').delete()
        
        // Copy OpenAPI specs with versioning (YAML only) from API project
        copy {
            from project(':wave-api').file('build/openapi/openapi.yaml')
            into resourcesDir
            rename 'openapi.yaml', 'openapi-latest.yaml'
        }
        
        copy {
            from project(':wave-api').file('build/openapi/openapi.yaml')
            into resourcesDir
            rename 'openapi.yaml', "openapi-${version}.yaml"
        }
        
        // Collect all available OpenAPI version files
        def availableVersions = []
        resourcesDir.listFiles().findAll { it.name.startsWith('openapi-') && it.name.endsWith('.yaml') && !it.name.endsWith('-latest.yaml') }
            .collect { it.name.replaceAll(/openapi-(.+)\.yaml/, '$1') }
            .each { availableVersions << it }
        
        // Sort versions in descending order (newest first)
        availableVersions.sort { a, b ->
            def parseVersion = { v -> v.split(/\./).collect { it.toInteger() } }
            def aVer = parseVersion(a)
            def bVer = parseVersion(b)
            
            for (int i = 0; i < Math.max(aVer.size(), bVer.size()); i++) {
                int aPart = i < aVer.size() ? aVer[i] : 0
                int bPart = i < bVer.size() ? bVer[i] : 0
                if (aPart != bPart) {
                    return bPart <=> aPart
                }
            }
            return 0
        }
        
        // Generate versions.txt index file
        def versionsFile = new File(resourcesDir, 'versions.txt')
        versionsFile.text = availableVersions.join('\n')
        
        // Generate index.html from template
        def templateFile = file('src/main/resources/swagger-ui-template.html')
        def indexHtml = file("${resourcesDir}/index.html")
        
        def templateContent = templateFile.text
        def processedContent = templateContent.replace('${PROJECT_VERSION}', version)
        
        indexHtml.text = processedContent
    }
    
    inputs.files(project(':wave-api').file('build/openapi/openapi.yaml'), 'src/main/resources/swagger-ui-template.html', '../VERSION')
    outputs.dir('src/main/resources/public/openapi')
}

// Clean old generated files
tasks.register('cleanApiCode') {
    group = 'code generation'
    description = 'Clean existing generated API files'
    
    doLast {
        // Clean generated files from both projects
        delete fileTree('src/main/java/io/seqera/wave/api/spec') { include '**/*.java' }
        delete fileTree(project(':wave-api').file('src/main/java/io/seqera/wave/api/schema/v0')) { include '**/*.java' }
        
        logger.info("Cleaned generated API files")
    }
}

// API Code Generation Tasks
tasks.register('generateApiCode') {
    group = 'code generation'
    description = 'Copy generated API interfaces and copy model classes to API project'
    dependsOn 'cleanApiCode', 'generateServerOpenApiModels', 'generateServerOpenApiApis'
    
    mustRunAfter 'cleanApiCode'
    
    doLast {
        // Copy spec interfaces to app project (stay here)
        copy {
            from 'build/generated/openapi/generateServerOpenApiApis/src/main/java/io/seqera/wave/api/spec'
            into 'src/main/java/io/seqera/wave/api/spec'
            include '**/*.java'
        }
        
        // Copy model classes to API project (they belong there)
        copy {
            from 'build/generated/openapi/generateServerOpenApiModels/src/main/java/io/seqera/wave/api/schema/v0'
            into project(':wave-api').file('src/main/java/io/seqera/wave/api/schema/v0')
            include '**/*.java'
        }
        
        logger.info("Copied generated API spec interfaces to app and model classes to API project")
    }
}

// Ensure OpenAPI generation happens before server code generation
generateServerOpenApiModels.dependsOn project(':wave-api').tasks.named('generateOpenApi')
generateServerOpenApiApis.dependsOn project(':wave-api').tasks.named('generateOpenApi')

// Wire Swagger UI generation into build process
processResources.dependsOn generateSwaggerUI
tasks.named('inspectRuntimeClasspath') {
    dependsOn generateSwaggerUI
}

// Make sure generated code is available for compilation
tasks.named('compileJava') {
    dependsOn 'generateSwaggerUI', project(':wave-api').tasks.named('compileJava')
}

// Exclude generated files from the build directory to avoid duplicates
configurations.all {
    exclude group: 'build.generated.openapi'
}

tasks.withType(JavaCompile) {
    exclude '**/build/generated/**'
}

// Remove generated sources from source sets to avoid duplicates
afterEvaluate {
    sourceSets.main.java.srcDirs = sourceSets.main.java.srcDirs.findAll { srcDir ->
        !srcDir.toString().contains('build/generated')
    }
}

// Handle duplicate OpenAPI files
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jacoco {
    toolVersion '0.8.12'
}
/**
 * Code coverage with JaCoCo.
 * See: https://www.jacoco.org/; https://docs.gradle.org/current/userguide/jacoco_plugin.html
 */
// Code coverage report is always generated after tests run
test { finalizedBy jacocoTestReport }
jacocoTestReport {
    // Tests are required to run before generating the code coverage report
    dependsOn test
    // Remove closure classes from the report, as they are already covered by the enclosing class coverage stats adding only noise.
    // See: https://stackoverflow.com/questions/39453696
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect { dir ->
            fileTree(dir: dir, excludes: ['**/*$*_closure*'])
        }))
    }
}
