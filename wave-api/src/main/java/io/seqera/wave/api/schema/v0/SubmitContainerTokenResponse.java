/*
 * Wave API
 * Wave Containers Provisioning Service API A comprehensive container orchestration and build service
 *
 * The version of the OpenAPI document: 1.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.seqera.wave.api.schema.v0;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.time.ZonedDateTime;
import com.fasterxml.jackson.annotation.*;
import io.micronaut.serde.annotation.Serdeable;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import io.micronaut.core.annotation.Nullable;
import jakarta.annotation.Generated;

/**
 * Submit container token response
 */
@Serdeable
@JsonPropertyOrder({
    SubmitContainerTokenResponse.JSON_PROPERTY_REQUEST_ID,
    SubmitContainerTokenResponse.JSON_PROPERTY_CONTAINER_TOKEN,
    SubmitContainerTokenResponse.JSON_PROPERTY_TARGET_IMAGE,
    SubmitContainerTokenResponse.JSON_PROPERTY_EXPIRATION,
    SubmitContainerTokenResponse.JSON_PROPERTY_CONTAINER_IMAGE,
    SubmitContainerTokenResponse.JSON_PROPERTY_BUILD_ID,
    SubmitContainerTokenResponse.JSON_PROPERTY_CACHED,
    SubmitContainerTokenResponse.JSON_PROPERTY_FREEZE,
    SubmitContainerTokenResponse.JSON_PROPERTY_MIRROR,
    SubmitContainerTokenResponse.JSON_PROPERTY_SCAN_ID,
    SubmitContainerTokenResponse.JSON_PROPERTY_SUCCEEDED,
})
@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
public class SubmitContainerTokenResponse {

    public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
    public static final String JSON_PROPERTY_CONTAINER_TOKEN = "containerToken";
    public static final String JSON_PROPERTY_TARGET_IMAGE = "targetImage";
    public static final String JSON_PROPERTY_EXPIRATION = "expiration";
    public static final String JSON_PROPERTY_CONTAINER_IMAGE = "containerImage";
    public static final String JSON_PROPERTY_BUILD_ID = "buildId";
    public static final String JSON_PROPERTY_CACHED = "cached";
    public static final String JSON_PROPERTY_FREEZE = "freeze";
    public static final String JSON_PROPERTY_MIRROR = "mirror";
    public static final String JSON_PROPERTY_SCAN_ID = "scanId";
    public static final String JSON_PROPERTY_SUCCEEDED = "succeeded";

    /**
     * Unique Id for this request
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_REQUEST_ID)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String requestId;

    /**
     * A unique authorization token assigned to this request
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_CONTAINER_TOKEN)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String containerToken;

    /**
     * The fully qualified wave container name to be used
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_TARGET_IMAGE)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String targetImage;

    /**
     * The time instant when the container token is going to expire
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_EXPIRATION)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private ZonedDateTime expiration;

    /**
     * The source container image that originated this request
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_CONTAINER_IMAGE)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String containerImage;

    /**
     * The ID of the build associated with this request or null of the image already exists
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_BUILD_ID)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String buildId;

    /**
     * Whenever it&#39;s a cached build image
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_CACHED)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private Boolean cached;

    /**
     * When the result is a freeze container
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_FREEZE)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private Boolean freeze;

    /**
     * When the result is a mirror container
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_MIRROR)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private Boolean mirror;

    /**
     * The id of the security scan associated with this container
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_SCAN_ID)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String scanId;

    /**
     * Whenever the container has been provisioned successfully or not
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_SUCCEEDED)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private Boolean succeeded;

    /**
     * Unique Id for this request
     *
     * @return the requestId property value
     */
    public String getRequestId() {
        return requestId;
    }

    /**
     * Set the requestId property value
     *
     * @param requestId property value to set
     */
    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Set requestId in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse requestId(String requestId) {
        this.requestId = requestId;
        return this;
    }

    /**
     * A unique authorization token assigned to this request
     *
     * @return the containerToken property value
     */
    public String getContainerToken() {
        return containerToken;
    }

    /**
     * Set the containerToken property value
     *
     * @param containerToken property value to set
     */
    public void setContainerToken(String containerToken) {
        this.containerToken = containerToken;
    }

    /**
     * Set containerToken in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse containerToken(String containerToken) {
        this.containerToken = containerToken;
        return this;
    }

    /**
     * The fully qualified wave container name to be used
     *
     * @return the targetImage property value
     */
    public String getTargetImage() {
        return targetImage;
    }

    /**
     * Set the targetImage property value
     *
     * @param targetImage property value to set
     */
    public void setTargetImage(String targetImage) {
        this.targetImage = targetImage;
    }

    /**
     * Set targetImage in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse targetImage(String targetImage) {
        this.targetImage = targetImage;
        return this;
    }

    /**
     * The time instant when the container token is going to expire
     *
     * @return the expiration property value
     */
    public ZonedDateTime getExpiration() {
        return expiration;
    }

    /**
     * Set the expiration property value
     *
     * @param expiration property value to set
     */
    public void setExpiration(ZonedDateTime expiration) {
        this.expiration = expiration;
    }

    /**
     * Set expiration in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse expiration(ZonedDateTime expiration) {
        this.expiration = expiration;
        return this;
    }

    /**
     * The source container image that originated this request
     *
     * @return the containerImage property value
     */
    public String getContainerImage() {
        return containerImage;
    }

    /**
     * Set the containerImage property value
     *
     * @param containerImage property value to set
     */
    public void setContainerImage(String containerImage) {
        this.containerImage = containerImage;
    }

    /**
     * Set containerImage in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse containerImage(String containerImage) {
        this.containerImage = containerImage;
        return this;
    }

    /**
     * The ID of the build associated with this request or null of the image already exists
     *
     * @return the buildId property value
     */
    public String getBuildId() {
        return buildId;
    }

    /**
     * Set the buildId property value
     *
     * @param buildId property value to set
     */
    public void setBuildId(String buildId) {
        this.buildId = buildId;
    }

    /**
     * Set buildId in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse buildId(String buildId) {
        this.buildId = buildId;
        return this;
    }

    /**
     * Whenever it&#39;s a cached build image
     *
     * @return the cached property value
     */
    public Boolean getCached() {
        return cached;
    }

    /**
     * Set the cached property value
     *
     * @param cached property value to set
     */
    public void setCached(Boolean cached) {
        this.cached = cached;
    }

    /**
     * Set cached in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse cached(Boolean cached) {
        this.cached = cached;
        return this;
    }

    /**
     * When the result is a freeze container
     *
     * @return the freeze property value
     */
    public Boolean getFreeze() {
        return freeze;
    }

    /**
     * Set the freeze property value
     *
     * @param freeze property value to set
     */
    public void setFreeze(Boolean freeze) {
        this.freeze = freeze;
    }

    /**
     * Set freeze in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse freeze(Boolean freeze) {
        this.freeze = freeze;
        return this;
    }

    /**
     * When the result is a mirror container
     *
     * @return the mirror property value
     */
    public Boolean getMirror() {
        return mirror;
    }

    /**
     * Set the mirror property value
     *
     * @param mirror property value to set
     */
    public void setMirror(Boolean mirror) {
        this.mirror = mirror;
    }

    /**
     * Set mirror in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse mirror(Boolean mirror) {
        this.mirror = mirror;
        return this;
    }

    /**
     * The id of the security scan associated with this container
     *
     * @return the scanId property value
     */
    public String getScanId() {
        return scanId;
    }

    /**
     * Set the scanId property value
     *
     * @param scanId property value to set
     */
    public void setScanId(String scanId) {
        this.scanId = scanId;
    }

    /**
     * Set scanId in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse scanId(String scanId) {
        this.scanId = scanId;
        return this;
    }

    /**
     * Whenever the container has been provisioned successfully or not
     *
     * @return the succeeded property value
     */
    public Boolean getSucceeded() {
        return succeeded;
    }

    /**
     * Set the succeeded property value
     *
     * @param succeeded property value to set
     */
    public void setSucceeded(Boolean succeeded) {
        this.succeeded = succeeded;
    }

    /**
     * Set succeeded in a chainable fashion.
     *
     * @return The same instance of SubmitContainerTokenResponse for chaining.
     */
    public SubmitContainerTokenResponse succeeded(Boolean succeeded) {
        this.succeeded = succeeded;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        var submitContainerTokenResponse = (SubmitContainerTokenResponse) o;
        return Objects.equals(requestId, submitContainerTokenResponse.requestId)
            && Objects.equals(containerToken, submitContainerTokenResponse.containerToken)
            && Objects.equals(targetImage, submitContainerTokenResponse.targetImage)
            && Objects.equals(expiration, submitContainerTokenResponse.expiration)
            && Objects.equals(containerImage, submitContainerTokenResponse.containerImage)
            && Objects.equals(buildId, submitContainerTokenResponse.buildId)
            && Objects.equals(cached, submitContainerTokenResponse.cached)
            && Objects.equals(freeze, submitContainerTokenResponse.freeze)
            && Objects.equals(mirror, submitContainerTokenResponse.mirror)
            && Objects.equals(scanId, submitContainerTokenResponse.scanId)
            && Objects.equals(succeeded, submitContainerTokenResponse.succeeded);
    }

    @Override
    public int hashCode() {
        return Objects.hash(requestId, containerToken, targetImage, expiration, containerImage, buildId, cached, freeze, mirror, scanId, succeeded);
    }

    @Override
    public String toString() {
        return "SubmitContainerTokenResponse("
            + "requestId: " + getRequestId() + ", "
            + "containerToken: " + getContainerToken() + ", "
            + "targetImage: " + getTargetImage() + ", "
            + "expiration: " + getExpiration() + ", "
            + "containerImage: " + getContainerImage() + ", "
            + "buildId: " + getBuildId() + ", "
            + "cached: " + getCached() + ", "
            + "freeze: " + getFreeze() + ", "
            + "mirror: " + getMirror() + ", "
            + "scanId: " + getScanId() + ", "
            + "succeeded: " + getSucceeded()
            + ")";
    }

}