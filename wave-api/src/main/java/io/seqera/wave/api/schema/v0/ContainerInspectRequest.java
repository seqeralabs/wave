/*
 * Wave API
 * Wave Containers Provisioning Service API A comprehensive container orchestration and build service
 *
 * The version of the OpenAPI document: 1.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.seqera.wave.api.schema.v0;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import com.fasterxml.jackson.annotation.*;
import io.micronaut.serde.annotation.Serdeable;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import io.micronaut.core.annotation.Nullable;
import jakarta.annotation.Generated;

/**
 * Container inspect request
 */
@Serdeable
@JsonPropertyOrder({
    ContainerInspectRequest.JSON_PROPERTY_CONTAINER_IMAGE,
    ContainerInspectRequest.JSON_PROPERTY_CONTAINER_PLATFORM,
})
@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
public class ContainerInspectRequest {

    public static final String JSON_PROPERTY_CONTAINER_IMAGE = "containerImage";
    public static final String JSON_PROPERTY_CONTAINER_PLATFORM = "containerPlatform";

    /**
     * Container image to inspect
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CONTAINER_IMAGE)
    private String containerImage;

    /**
     * Container platform
     */
    @Nullable(inherited = true)
    @JsonProperty(JSON_PROPERTY_CONTAINER_PLATFORM)
    @JsonInclude(JsonInclude.Include.USE_DEFAULTS)
    private String containerPlatform;

    public ContainerInspectRequest(String containerImage) {
        this.containerImage = containerImage;
    }

    /**
     * Container image to inspect
     *
     * @return the containerImage property value
     */
    public String getContainerImage() {
        return containerImage;
    }

    /**
     * Set the containerImage property value
     *
     * @param containerImage property value to set
     */
    public void setContainerImage(String containerImage) {
        this.containerImage = containerImage;
    }

    /**
     * Set containerImage in a chainable fashion.
     *
     * @return The same instance of ContainerInspectRequest for chaining.
     */
    public ContainerInspectRequest containerImage(String containerImage) {
        this.containerImage = containerImage;
        return this;
    }

    /**
     * Container platform
     *
     * @return the containerPlatform property value
     */
    public String getContainerPlatform() {
        return containerPlatform;
    }

    /**
     * Set the containerPlatform property value
     *
     * @param containerPlatform property value to set
     */
    public void setContainerPlatform(String containerPlatform) {
        this.containerPlatform = containerPlatform;
    }

    /**
     * Set containerPlatform in a chainable fashion.
     *
     * @return The same instance of ContainerInspectRequest for chaining.
     */
    public ContainerInspectRequest containerPlatform(String containerPlatform) {
        this.containerPlatform = containerPlatform;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        var containerInspectRequest = (ContainerInspectRequest) o;
        return Objects.equals(containerImage, containerInspectRequest.containerImage)
            && Objects.equals(containerPlatform, containerInspectRequest.containerPlatform);
    }

    @Override
    public int hashCode() {
        return Objects.hash(containerImage, containerPlatform);
    }

    @Override
    public String toString() {
        return "ContainerInspectRequest("
            + "containerImage: " + getContainerImage() + ", "
            + "containerPlatform: " + getContainerPlatform()
            + ")";
    }

}